name: Build

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  Windows:
    strategy:
      matrix:
        buildtype: [Debug, Release]
    runs-on: windows-2019
    env:
      VS_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
      MSBUILD_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\
      VULKAN_SDK: C:\vulkan-sdk-1.1.121.2\
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Install Dependencies
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://github.com/Scarlet-Engine-Team-GameDev-McGill/Scarlet-Engine/files/5455641/vulkan-sdk-1.1.121.2.zip" -OutFile C:\vulkan-sdk-1.1.121.2.zip
          Expand-Archive -Path C:\vulkan-sdk-1.1.121.2.zip -DestinationPath C:\vulkan-sdk-1.1.121.2\
      - name: Create Build Environment
        shell: powershell
        run: cmake -G "Visual Studio 16 2019" -DCOMPILE_UNIT_TESTS=ON .
      - name: Build
        shell: cmd
        run: '"%MSBUILD_PATH%\MSBuild.exe" ScarletEngine.sln /p:Configuration=${{ matrix.buildtype }}'
      - name: Test
        shell: cmd
        run: ctest -C ${{ matrix.buildtype }}

  Linux:
    strategy:
      matrix:
        compiler: [g++-11, clang++-12]
        buildtype: [Debug]
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    
    - name: Install Dependencies
      run: |
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add - 
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.148-bionic.list https://packages.lunarg.com/vulkan/1.2.148/lunarg-vulkan-1.2.148-bionic.list
        sudo apt-get update
        sudo apt-get install cmake libgl1-mesa-dev xorg-dev vulkan-sdk ${{ matrix.compiler }}
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build
        
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
        CXX: /usr/bin/${{ matrix.compiler }}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} -DCOMPILE_UNIT_TESTS=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      env:
        CXX: /usr/bin/${{ matrix.compiler }}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.buildtype }}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.buildtype }}